IF OBJECT_ID('dbo.Address', 'U') IS NOT NULL DROP TABLE dbo.Address;
IF OBJECT_ID('dbo.Student_stats', 'U') IS NOT NULL DROP TABLE dbo.Student_stats;
IF OBJECT_ID('dbo.Student', 'U') IS NOT NULL DROP TABLE dbo.Student;

CREATE TABLE dbo.Student (
    student_id INT PRIMARY KEY IDENTITY(1,1),
    first_name NVARCHAR(50) NOT NULL,
    middle_name NVARCHAR(50) NULL,
    last_name NVARCHAR(50) NOT NULL,
    student_branch NVARCHAR(50) NOT NULL,
    student_marks INT NOT NULL CHECK (student_marks BETWEEN 0 AND 100)
);

CREATE TABLE dbo.Address (
    address_id INT PRIMARY KEY IDENTITY(1,1),
    student_id INT NOT NULL,
    address NVARCHAR(255) NOT NULL,
    pin_code NVARCHAR(10) NOT NULL,
    CONSTRAINT FK_Address_Student FOREIGN KEY (student_id) REFERENCES dbo.Student(student_id) ON DELETE CASCADE
);

CREATE TABLE dbo.Student_stats (
    student_id INT PRIMARY KEY,
    full_name NVARCHAR(155) NOT NULL,
    student_branch NVARCHAR(50) NOT NULL,
    student_percentage DECIMAL(5,2) NOT NULL,
    student_location NVARCHAR(255) NULL
);


INSERT INTO dbo.Student (first_name, middle_name, last_name, student_branch, student_marks) VALUES
('John', 'A', 'Doe', 'CSE', 85),
('Jane', NULL, 'Smith', 'ECE', 78),
('Mike', 'B', 'Johnson', 'ME', 35),
('Sara', NULL, 'Williams', 'CSE', 92);

INSERT INTO dbo.Address (student_id, address, pin_code) VALUES
(1, '123 Main St', '110001'),
(2, '456 Park Ave', '110002'),
(3, '789 Elm St', '110003'),
(4, '321 Oak St', '110004');






CREATE OR ALTER TRIGGER trg_Student_Stats_Sync
ON dbo.Student
AFTER INSERT, UPDATE, DELETE
AS
BEGIN
    SET NOCOUNT ON;

    -- Delete students from Student_stats who no longer qualify (marks < 40 or deleted)
    DELETE ss
    FROM dbo.Student_stats ss
    LEFT JOIN dbo.Student s ON ss.student_id = s.student_id
    WHERE s.student_id IS NULL OR s.student_marks < 40;

    -- Insert new qualifying students not already in Student_stats
    INSERT INTO dbo.Student_stats (student_id, full_name, student_branch, student_percentage, student_location)
    SELECT 
        s.student_id,
        CONCAT(s.first_name, ' ', ISNULL(s.middle_name + ' ', ''), s.last_name),
        s.student_branch,
        CAST(s.student_marks AS DECIMAL(5,2)),
        a.address
    FROM dbo.Student s
    LEFT JOIN dbo.Address a ON s.student_id = a.student_id
    LEFT JOIN dbo.Student_stats ss ON s.student_id = ss.student_id
    WHERE s.student_marks >= 40 AND ss.student_id IS NULL;

    -- Update existing qualifying students in Student_stats
    UPDATE ss
    SET 
        full_name = CONCAT(s.first_name, ' ', ISNULL(s.middle_name + ' ', ''), s.last_name),
        student_branch = s.student_branch,
        student_percentage = CAST(s.student_marks AS DECIMAL(5,2)),
        student_location = a.address
    FROM dbo.Student_stats ss
    INNER JOIN dbo.Student s ON ss.student_id = s.student_id
    LEFT JOIN dbo.Address a ON s.student_id = a.student_id
    WHERE s.student_marks >= 40;
END


CREATE OR ALTER PROCEDURE dbo.InsertStudent
    @first_name NVARCHAR(50),
    @middle_name NVARCHAR(50) = NULL,
    @last_name NVARCHAR(50),
    @student_branch NVARCHAR(50),
    @student_marks INT
AS
BEGIN
    SET NOCOUNT ON;
    BEGIN TRY
        INSERT INTO dbo.Student (first_name, middle_name, last_name, student_branch, student_marks)
        VALUES (@first_name, @middle_name, @last_name, @student_branch, @student_marks);
    END TRY
    BEGIN CATCH
        DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT;
        SELECT 
            @ErrorMessage = ERROR_MESSAGE(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE();
        RAISERROR('InsertStudent failed: %s', @ErrorSeverity, @ErrorState, @ErrorMessage);
        RETURN;
    END CATCH
END



CREATE OR ALTER PROCEDURE dbo.UpdateStudent
    @student_id INT,
    @first_name NVARCHAR(50),
    @middle_name NVARCHAR(50) = NULL,
    @last_name NVARCHAR(50),
    @student_branch NVARCHAR(50),
    @student_marks INT
AS
BEGIN
    SET NOCOUNT ON;
    BEGIN TRY
        UPDATE dbo.Student
        SET first_name = @first_name,
            middle_name = @middle_name,
            last_name = @last_name,
            student_branch = @student_branch,
            student_marks = @student_marks
        WHERE student_id = @student_id;

        IF @@ROWCOUNT = 0
            RAISERROR('No student found with the given ID.', 16, 1);
    END TRY
    BEGIN CATCH
        DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT;
        SELECT 
            @ErrorMessage = ERROR_MESSAGE(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE();
        RAISERROR('UpdateStudent failed: %s', @ErrorSeverity, @ErrorState, @ErrorMessage);
        RETURN;
    END CATCH
END


CREATE OR ALTER PROCEDURE dbo.DeleteStudent
    @student_id INT
AS
BEGIN
    SET NOCOUNT ON;
    BEGIN TRY
        DELETE FROM dbo.Student WHERE student_id = @student_id;

        IF @@ROWCOUNT = 0
            RAISERROR('No student found with the given ID.', 16, 1);
    END TRY
    BEGIN CATCH
        DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT;
        SELECT 
            @ErrorMessage = ERROR_MESSAGE(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE();
        RAISERROR('DeleteStudent failed: %s', @ErrorSeverity, @ErrorState, @ErrorMessage);
        RETURN;
    END CATCH
END

CREATE OR ALTER PROCEDURE dbo.InsertAddress
    @student_id INT,
    @address NVARCHAR(255),
    @pin_code NVARCHAR(10)
AS
BEGIN
    SET NOCOUNT ON;
    BEGIN TRY
        INSERT INTO dbo.Address (student_id, address, pin_code)
        VALUES (@student_id, @address, @pin_code);
    END TRY
    BEGIN CATCH
        DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT;
        SELECT 
            @ErrorMessage = ERROR_MESSAGE(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE();
        RAISERROR('InsertAddress failed: %s', @ErrorSeverity, @ErrorState, @ErrorMessage);
        RETURN;
    END CATCH
END


CREATE OR ALTER PROCEDURE dbo.UpdateAddress
    @address_id INT,
    @address NVARCHAR(255),
    @pin_code NVARCHAR(10)
AS
BEGIN
    SET NOCOUNT ON;
    BEGIN TRY
        UPDATE dbo.Address
        SET address = @address,
            pin_code = @pin_code
        WHERE address_id = @address_id;

        IF @@ROWCOUNT = 0
            RAISERROR('No address found with the given ID.', 16, 1);
    END TRY
    BEGIN CATCH
        DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT;
        SELECT 
            @ErrorMessage = ERROR_MESSAGE(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE();
        RAISERROR('UpdateAddress failed: %s', @ErrorSeverity, @ErrorState, @ErrorMessage);
        RETURN;
    END CATCH
END



CREATE OR ALTER PROCEDURE dbo.DeleteAddress
    @address_id INT
AS
BEGIN
    SET NOCOUNT ON;
    BEGIN TRY
        DELETE FROM dbo.Address WHERE address_id = @address_id;

        IF @@ROWCOUNT = 0
            RAISERROR('No address found with the given ID.', 16, 1);
    END TRY
    BEGIN CATCH
        DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT;
        SELECT 
            @ErrorMessage = ERROR_MESSAGE(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE();
        RAISERROR('DeleteAddress failed: %s', @ErrorSeverity, @ErrorState, @ErrorMessage);
        RETURN;
    END CATCH
END




CREATE OR ALTER PROCEDURE dbo.SyncStudentStats
AS
BEGIN
    SET NOCOUNT ON;
    BEGIN TRY
        -- Delete students from Student_stats who no longer qualify (marks < 40 or deleted)
        DELETE ss
        FROM dbo.Student_stats ss
        LEFT JOIN dbo.Student s ON ss.student_id = s.student_id
        WHERE s.student_id IS NULL OR s.student_marks < 40;

        -- Insert new qualifying students not already in Student_stats
        INSERT INTO dbo.Student_stats (student_id, full_name, student_branch, student_percentage, student_location)
        SELECT 
            s.student_id,
            CONCAT(s.first_name, ' ', ISNULL(s.middle_name + ' ', ''), s.last_name),
            s.student_branch,
            CAST(s.student_marks AS DECIMAL(5,2)),
            a.address
        FROM dbo.Student s
        LEFT JOIN dbo.Address a ON s.student_id = a.student_id
        LEFT JOIN dbo.Student_stats ss ON s.student_id = ss.student_id
        WHERE s.student_marks >= 40 AND ss.student_id IS NULL;

        -- Update existing qualifying students in Student_stats
        UPDATE ss
        SET 
            full_name = CONCAT(s.first_name, ' ', ISNULL(s.middle_name + ' ', ''), s.last_name),
            student_branch = s.student_branch,
            student_percentage = CAST(s.student_marks AS DECIMAL(5,2)),
            student_location = a.address
        FROM dbo.Student_stats ss
        INNER JOIN dbo.Student s ON ss.student_id = s.student_id
        LEFT JOIN dbo.Address a ON s.student_id = a.student_id
        WHERE s.student_marks >= 40;
    END TRY
    BEGIN CATCH
        DECLARE @ErrorMessage NVARCHAR(4000), @ErrorSeverity INT, @ErrorState INT;
        SELECT 
            @ErrorMessage = ERROR_MESSAGE(),
            @ErrorSeverity = ERROR_SEVERITY(),
            @ErrorState = ERROR_STATE();
        RAISERROR('SyncStudentStats failed: %s', @ErrorSeverity, @ErrorState, @ErrorMessage);
        RETURN;
    END CATCH
END